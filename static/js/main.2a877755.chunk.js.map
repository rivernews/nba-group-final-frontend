{"version":3,"sources":["data/processed_joined_df.csv","components/ExampleViz/ExampleViz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ExampleViz","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","_this2","initializeVizSpace","loadDataset","then","setState","console","log","setupSVGGradients","drawExample","svg","d3","node","attrs","viewBox","concat","getSvgOuterWidth","getSvgOuterHeight","preserveAspectRatio","append","transform","svgSize","margin","left","top","_this3","Promise","resolve","reject","csvData","JSON","parse","stringify","error","svgDefs","gradients","example","id","class","offset","drawExampleRect","x","y","width","height","assign","availableSpace","right","bottom","_this4","react_default","a","createElement","className","ref","Component","App","ExampleViz_ExampleViz_ExampleViz","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a877755.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/processed_joined_df.8ab5a7c3.csv\";","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport * as d3 from \"d3\";\nimport \"d3-selection-multi\";\n\nimport './ExampleViz.scss'\n\nimport csvData from \"../../data/processed_joined_df.csv\";\n\nclass ExampleViz extends Component {\n    static propTypes = {\n        svgSize: PropTypes.shape({\n            availableSpace: PropTypes.shape({\n                width: PropTypes.number,\n                height: PropTypes.number,\n            }),\n            margin: PropTypes.shape({\n                top: PropTypes.number,\n                left: PropTypes.number,\n                right: PropTypes.number,\n                bottom: PropTypes.number,\n            })\n        })\n    }\n\n    state = {\n        data: null\n    }\n\n    constructor(props) {\n        super(props)\n    }\n\n    componentDidMount() {\n        this.initializeVizSpace()\n        this.loadDataset().then(\n            (data) => {\n                this.setState({\n                    data\n                }, () => {\n                    console.log('data', this.state.data)\n                })\n            }    \n        )\n\n        this.setupSVGGradients()\n    }\n\n    componentDidUpdate() {\n        this.drawExample()\n    }\n\n    /**\n     * D3 Setup Wrapper Functions\n     */\n    initializeVizSpace() {\n        this.svg = d3.select(this.node)\n            .attrs({\n                viewBox: `0 0 ${this.getSvgOuterWidth()} ${this.getSvgOuterHeight()}`,\n                preserveAspectRatio: `xMidYMid meet`\n            })\n            ;\n\n        this.svg = this.svg.append(\"g\")\n            .attrs({\n                \"transform\": `translate(${this.props.svgSize.margin.left}, ${this.props.svgSize.margin.top})`,\n            })\n            ;\n    }\n\n    loadDataset() {\n        return new Promise((resolve, reject) => {\n            this.data = []\n            d3.csv(csvData).then((data) => {\n                this.data = JSON.parse(JSON.stringify(data))\n                resolve(this.data)\n            }, (error) => {\n                console.error(error)\n                reject(error)\n            })\n        })\n    }\n\n    setupSVGGradients() {\n        this.svgDefs = this.svg.append('defs')\n        this.gradients = {}\n        \n        this.gradients.example = this.svgDefs.append('linearGradient')\n        .attrs({\n            id: 'exampleGradient'\n        });\n        this.gradients.example.append('stop')\n        .attrs({\n            class: 'stop-left',\n            offset: 0\n        })\n        this.gradients.example.append('stop')\n        .attrs({\n            class: 'stop-right',\n            offset: 1\n        })\n    }\n\n    /**\n     * D3 Update Wrapepr Functions\n     */\n    drawExample() {\n        this.drawExampleRect({\n            x: 20,\n            y: 20,\n            width: '100px',\n            height: '400px'\n        })\n        this.drawExampleRect({\n            x: 50,\n            y: 20,\n            width: '60px',\n            height: '300px'\n        })\n        this.drawExampleRect({\n            x: 90,\n            y: 20,\n            width: '50px',\n            height: '250px'\n        })\n        this.drawExampleRect({\n            x: 130,\n            y: 20,\n            width: '40px',\n            height: '200px'\n        })\n    }\n\n    drawExampleRect(props) {\n        this.svg.append('rect')\n            .attrs(Object.assign({}, props, {\n                class: 'exmaple-rect',\n            }))\n            ;\n    }\n\n    /**\n     * Helper Functions\n     */\n    getSvgOuterWidth() {\n        return (\n            this.props.svgSize.availableSpace.width +\n            this.props.svgSize.margin.left +\n            this.props.svgSize.margin.right\n        )\n    }\n\n    getSvgOuterHeight() {\n        return (\n            this.props.svgSize.availableSpace.height +\n            this.props.svgSize.margin.top +\n            this.props.svgSize.margin.bottom\n        )\n    }\n\n    render() {\n        return (\n            <div>\n                <svg className=\"svg-content\" ref={node => this.node = node}>\n                </svg>\n            </div>\n        )\n    }\n}\n\nexport { ExampleViz };","import React, { Component } from 'react';\nimport './App.scss';\n\nimport { ExampleViz} from \"./components/ExampleViz/ExampleViz\";\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n        this.svgSize = {\n            availableSpace: {\n                width: 700,\n                height: 300,\n            },\n            margin: {\n                top: 50,\n                left: 80,\n                right: 50,\n                bottom: 80,\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1>NBA Viz</h1>\n                </header>\n                <content className=\"App-content\">\n                    <ExampleViz svgSize={this.svgSize} />\n                </content>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}